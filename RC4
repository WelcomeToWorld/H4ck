java: 
public  class RC4CipherEntity 
{
    static String RC4(String keys,String encrypt) 
    {
        char[] keyBytes=new char[256];
        char[] cypherBytes=new char[256];

        for(int i=0; i<256; ++i) 
        {
            keyBytes[i]=keys.charAt(i % keys.length());           
            cypherBytes[i]=(char)i;
        }
        
        int jump=0;        
        for(int i=0; i<256; ++i) 
        {
            jump=(jump+cypherBytes[i]+keyBytes[i]) & 0xFF;
            char tmp=cypherBytes[i]; // Swap:
            cypherBytes[i]=cypherBytes[jump];
            cypherBytes[jump]=tmp;
        }
        
        int i=0;
        jump=0;
        String Result="";        
        for(int x=0; x < encrypt.length(); ++x) 
        {
            i=(i+1) & 0xFF;
            char tmp=cypherBytes[i];
            jump=(jump+tmp) & 0xFF;
            char t=(char)((tmp+cypherBytes[jump]) & 0xFF);
            cypherBytes[i]=cypherBytes[jump]; // Swap:
            cypherBytes[jump]=tmp;
            
            try
            {
                Result+=new String(new char[]{(char)(encrypt.charAt(x)^cypherBytes[t])});
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        
        return Result; 
    }    
    
    
    static String Data2ASCIIhex(String inputString) 
    {
        String result = "";
        String Chars = "0123456789ABCDEF";

        for (int i = 0; i < inputString.length(); ++i) {
            char Byte1 = (char) inputString.charAt(i);
            char lo = (char) (Byte1 & 0x0F);
            char hi = (char) (Byte1 >> 4);
            result += new String(new char[] { Chars.charAt(hi),
                    Chars.charAt(lo) });
        }

        return result;
    }
    
    public static void main(String args[])
    {
        String key="abcdefg";
        String message ="hello world";
        String result=RC4(key,message);
        String result2=RC4(key,result);
        System.out.println("result:" + Data2ASCIIhex(result));
        System.out.println("result2:" + result2);
    }
}


.net
/* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4: */
**
 * RC4.NET 1.0
 *
 * RC4.NET is a petite library that allows you to use RC4
 * encryption easily in the .NET Platform. It's OO and can
 * produce outputs in binary and hex.
 *
 * (C) Copyright 2006 Mukul Sabharwal [http://mjsabby.com]
 *       All Rights Reserved
 *
 * @link http://rc4dotnet.devhome.org
 * @author Mukul Sabharwal <mjsabby@gmail.com>
 * @version $Id: RC4.cs,v 1.0 2006/03/19 15:35:24 mukul Exp $
 * @copyright Copyright &copy; 2006 Mukul Sabharwal
 * @license http://www.gnu.org/copyleft/lesser.html
 * @package RC4.NET
 */

using System;
using System.Text;

namespace Common
{
    /**
     * RC4 Class
     * @package RC4.NET
     */
    public class RC4 : System.Web.UI.Page
    { /* inherits Page for ASP.NET */
        /**
         * Get ASCII Integer Code
         *
         * @param char ch Character to get ASCII value for
         * @access private
         * @return int
         */
        private static int ord(char ch)
        {
            return (int)(Encoding.GetEncoding(1252).GetBytes(ch + "")[0]);
        }
        /**
         * Get character representation of ASCII Code
         *
         * @param int i ASCII code
         * @access private
         * @return char
         */
        private static char chr(int i)
        {
            byte[] bytes = new byte[1];
            bytes[0] = (byte)i;
            return Encoding.GetEncoding(1252).GetString(bytes)[0];
        }
        /**
         * Convert Hex to Binary (hex2bin)
         *
         * @param string packtype Rudimentary in this implementation
         * @param string datastring Hex to be packed into Binary
         * @access private
         * @return string
         */
        private static string pack(string packtype, string datastring)
        {
            int i, j, datalength, packsize;
            byte[] bytes;
            char[] hex;
            string tmp;

            datalength = datastring.Length;
            packsize = (datalength / 2) + (datalength % 2);
            bytes = new byte[packsize];
            hex = new char[2];

            for (i = j = 0; i < datalength; i += 2)
            {
                hex[0] = datastring[i];
                if (datalength - i == 1)
                    hex[1] = '0';
                else
                    hex[1] = datastring[i + 1];
                tmp = new string(hex, 0, 2);
                try { bytes[j++] = byte.Parse(tmp, System.Globalization.NumberStyles.HexNumber); }
                catch { } /* grin */
            }
            return Encoding.GetEncoding(1252).GetString(bytes);
        }
        /**
         * Convert Binary to Hex (bin2hex)
         *
         * @param string bindata Binary data
         * @access public
         * @return string
         */
        public static string bin2hex(string bindata)
        {
            int i;
            byte[] bytes = Encoding.GetEncoding(1252).GetBytes(bindata);
            string hexString = "";
            for (i = 0; i < bytes.Length; i++)
            {
                hexString += bytes[i].ToString("x2");
            }
            return hexString;
        }

        public static Byte[] HexToByte(String szHex)
        {
            // 两个十六进制代表一个字节
            Int32 iLen = szHex.Length;
            if (iLen <= 0 || 0 != iLen % 2)
            {
                return null;
            }
            Int32 dwCount = iLen / 2;
            UInt32 tmp1, tmp2;
            Byte[] pbBuffer = new Byte[dwCount];
            for (Int32 i = 0; i < dwCount; i++)
            {
                tmp1 = (UInt32)szHex[i * 2] - (((UInt32)szHex[i * 2] >= (UInt32)'A') ? (UInt32)'A' - 10 : (UInt32)'0');
                if (tmp1 >= 16) return null;
                tmp2 = (UInt32)szHex[i * 2 + 1] - (((UInt32)szHex[i * 2 + 1] >= (UInt32)'A') ? (UInt32)'A' - 10 : (UInt32)'0');
                if (tmp2 >= 16) return null;
                pbBuffer[i] = (Byte)(tmp1 * 16 + tmp2);
            }
            return pbBuffer;
        }
        public static string HexToByteString(String szHex)
        {
            // 两个十六进制代表一个字节
            Int32 iLen = szHex.Length;
            if (iLen <= 0 || 0 != iLen % 2)
            {
                return null;
            }
            Int32 dwCount = iLen / 2;
            UInt32 tmp1, tmp2;
            //Byte[] pbBuffer = new Byte[dwCount];
            string pbBuffer = "";
            for (Int32 i = 0; i < dwCount; i++)
            {
                tmp1 = (UInt32)szHex[i * 2] - (((UInt32)szHex[i * 2] >= (UInt32)'A') ? (UInt32)'A' - 10 : (UInt32)'0');
                if (tmp1 >= 16) return null;
                tmp2 = (UInt32)szHex[i * 2 + 1] - (((UInt32)szHex[i * 2 + 1] >= (UInt32)'A') ? (UInt32)'A' - 10 : (UInt32)'0');
                if (tmp2 >= 16) return null;
                pbBuffer += (Byte)(tmp1 * 16 + tmp2);

            }
            return pbBuffer;
        }
        public static string ByteToHex(Byte[] vByte)
        {
            if (vByte == null || vByte.Length < 1) return null;
            StringBuilder sb = new StringBuilder(vByte.Length * 2);
            for (int i = 0; i < vByte.Length; i++)
            {
                if ((UInt32)vByte[i] < 0) return null;
                UInt32 k = (UInt32)vByte[i] / 16;
                sb.Append((Char)(k + ((k > 9) ? 'A' - 10 : '0')));
                k = (UInt32)vByte[i] % 16;
                sb.Append((Char)(k + ((k > 9) ? 'A' - 10 : '0')));
            }
            return sb.ToString();
        }


        /**
         * The symmetric encryption function
         *
         * @param string pwd Key to encrypt with (can be binary of hex)
         * @param string data Content to be encrypted
         * @param bool ispwdHex Key passed is in hexadecimal or not
         * @access public
         * @return string
         */
        public static string Encrypt(string pwd, string data, bool ispwdHex)
        {
            int a, i, j, k, tmp, pwd_length, data_length;
            int[] key, box;
            byte[] cipher;
            //string cipher;

            if (ispwdHex)
                pwd = pack("H*", pwd); // valid input, please!
            pwd_length = pwd.Length;
            data_length = data.Length;
            key = new int[256];
            box = new int[256];
            cipher = new byte[data.Length];
            //cipher = "";

            for (i = 0; i < 256; i++)
            {
                key[i] = ord(pwd[i % pwd_length]);
                box[i] = i;
            }
            for (j = i = 0; i < 256; i++)
            {
                j = (j + box[i] + key[i]) % 256;
                tmp = box[i];
                box[i] = box[j];
                box[j] = tmp;
            }
            for (a = j = i = 0; i < data_length; i++)
            {
                a = (a + 1) % 256;
                j = (j + box[a]) % 256;
                tmp = box[a];
                box[a] = box[j];
                box[j] = tmp;
                k = box[((box[a] + box[j]) % 256)];
                cipher[i] = (byte)(ord(data[i]) ^ k);
                //cipher += chr(ord(data[i]) ^ k);
            }
            return Encoding.GetEncoding(1252).GetString(cipher);
            //return cipher;
        }
        /**
         * Decryption, recall encryption
         *
         * @param string pwd Key to decrypt with (can be binary of hex)
         * @param string data Content to be decrypted
         * @param bool ispwdHex Key passed is in hexadecimal or not
         * @access public
         * @return string
         */
        public static string Decrypt(string pwd, string data, bool ispwdHex)
        {
            return Encrypt(pwd, data, ispwdHex);
        }
    }
}
  protected void Button7_Click(object sender, EventArgs e)
    {
        //加密
        string eD, d, dHex, data, pwd;
        data = txtValue.Text.Trim();
        pwd = txtKey.Text.Trim();
        eD = RC4.Encrypt(pwd, data, false); // Assuming the key is binary (what you typed)
        string HeD = RC4.bin2hex(eD);  //16进制输出        
    }
    protected void Button8_Click(object sender, EventArgs e)
    {
        //Decrypt data  解密
        string eD, d, dHex, data, pwd;
        data = txtEDstring.Text.Trim();
        pwd = txtKey.Text.Trim();
        eD = data; // Assuming the key is binary (what you typed)
        d = RC4.Decrypt(pwd, eD, false); // Assuming the key is binary (what you typed)

        Response.Write("Decrypted Data (using Key as is) : " + d + "<br/>");
        txtValue.Text = d;
    }

php:
<?php

    /* vim: set expandtab shiftwidth=4 softtabstop=4 tabstop=4: */

    /**
     * RC4Crypt 3.2
     *
     * RC4Crypt is a petite library that allows you to use RC4
     * encryption easily in PHP. It's OO and can produce outputs
     * in binary and hex.
     *
     * (C) Copyright 2006 Mukul Sabharwal [http://mjsabby.com]
     *     All Rights Reserved
     *
     * @link http://rc4crypt.devhome.org
     * @author Mukul Sabharwal <mjsabby@gmail.com>
     * @version $Id: class.rc4crypt.php,v 3.2 2006/03/10 05:47:24 mukul Exp $
     * @copyright Copyright &copy; 2006 Mukul Sabharwal
     * @license http://www.gnu.org/copyleft/gpl.html
     * @package RC4Crypt
     */

    /**
     * RC4 Class
     * @package RC4Crypt
     */
    class rc4crypt {
        /**
         * The symmetric encryption function
         *
         * @param string $pwd Key to encrypt with (can be binary of hex)
         * @param string $data Content to be encrypted
         * @param bool $ispwdHex Key passed is in hexadecimal or not
         * @access public
         * @return string
         */
        function encrypt ($pwd, $data, $ispwdHex = 0)
        {
                $pwd = 
            if ($ispwdHex)@pack('H*', $pwd); // valid input, please!

            $key[] = '';
            $box[] = '';
            $cipher = '';

            $pwd_length = strlen($pwd);
            $data_length = strlen($data);

            for ($i = 0; $i < 256; $i++)
            {
                $key[$i] = ord($pwd[$i % $pwd_length]);
                $box[$i] = $i;
            }
            for ($j = $i = 0; $i < 256; $i++)
            {
                $j = ($j + $box[$i] + $key[$i]) % 256;
                $tmp = $box[$i];
                $box[$i] = $box[$j];
                $box[$j] = $tmp;
            }
            for ($a = $j = $i = 0; $i < $data_length; $i++)
            {
                $a = ($a + 1) % 256;
                $j = ($j + $box[$a]) % 256;
                $tmp = $box[$a];
                $box[$a] = $box[$j];
                $box[$j] = $tmp;
                $k = $box[(($box[$a] + $box[$j]) % 256)];
                $cipher .= chr(ord($data[$i]) ^ $k);
            }
            return $cipher;
        }
        /**
         * Decryption, recall encryption
         *
         * @param string $pwd Key to decrypt with (can be binary of hex)
         * @param string $data Content to be decrypted
         * @param bool $ispwdHex Key passed is in hexadecimal or not
         * @access public
         * @return string
         */
        function decrypt ($pwd, $data, $ispwdHex = 0)
        {
            return rc4crypt::encrypt($pwd, $data, $ispwdHex);
        }
    }
?>

javascript
function RC4(Key, Data) {
     KeyBytes=new Array(255);
  CypherBytes=new Array(255);
  for(i=0; i<256; ++i) {
    KeyBytes[i]=Key.charCodeAt(i % Key.length);
    CypherBytes[i]=i;
  }
  Jump=0;
  for(i=0; i<256; ++i) {
    Jump=(Jump+CypherBytes[i]+KeyBytes[i]) & 0xFF;
    Tmp=CypherBytes[i]; // Swap:
    CypherBytes[i]=CypherBytes[Jump];
    CypherBytes[Jump]=Tmp;
  }
  i=0;
  Jump=0;
  Result="";
  for(X=0; X < Data.length; ++X) {
    i=(i+1) & 0xFF;
    Tmp=CypherBytes[i];
    Jump=(Jump+Tmp) & 0xFF;
    T=(Tmp+CypherBytes[Jump]) & 0xFF;
    CypherBytes[i]=CypherBytes[Jump]; // Swap:
    CypherBytes[Jump]=Tmp;
    Result+=String.fromCharCode(Data.charCodeAt(X) ^ CypherBytes[T]); // Character Encryption
  }
  return Result; 
}

function Data2ASCIIhex(S) {
  var Result="";
  var Chars="0123456789ABCDEF"
  for(i=0; i<S.length; ++i) {
    Byte=S.charCodeAt(i);
    lo=Byte & 0x0F;
    hi=Byte >> 4;
    Result+=Chars.charAt(hi)+Chars.charAt(lo);
  }
  return Result;
}
